		MongoDB Basic Assignment

1. use mongo_practice

2. db.createCollection("movies")

3. db.movies.insertOne({title : Fight Club,
writer : Chuck Palahniuko,
year : 1999,
actors : [
 Brad Pitt
 Edward Norton
]})

4. db.movies.insertMany([{title : "Pulp Fiction",
writer : "Quentin Tarantino",
year : 1994,
actors : [
 "John Travolta" , 
 "Uma Thurman"
]}, 
{title : "Inglorious Basterds",
writer : "Quentin Tarantino",
year : 2009,
actors : [
 "Brad Pitt" , 
 "Diane Kruger" , 
 "Eli Roth"
]}, 
{title : "The Hobbit: An Unexpected Journey",
writer : "J.R.R. Tolkein",
year : 2012,franchise : "The Hobbit"
}])

5. db.movies.insertMany([{title : "The Hobbit: The Desolation of Smaug" , 
writer : "J.R.R. Tolkein" , 
year : 2013,
franchise : "The Hobbit"} , 
{title : "The Hobbit: The Battle of the Five Armies",
writer : "J.R.R. Tolkein",
year : 2012,
franchise : "The Hobbit",
synopsis : "Bilbo and Company are forced to engage in a war against an array of
combatants and keep the Lonely Mountain from falling into the hands of a rising
darkness."} , 
{title : "Pee Wee Herman's Big Adventure"} ,
{title : "Avatar",
franchise : "The Hobbit"}])

6. get all documents
	db.movies.find()

7.  get all documents with writer set to "Quentin Tarantino"
	db.movies.find({'writer': "Quentin Tarantino"})

8. get all documents where actors include "Brad Pitt"
	db.movies.find({'actors': "Brad Pitt"})

9. get all documents with franchise set to "The Hobbit"
	db.movies.find({'franchise': "The Hobbit"})

10. get all movies released in the 90s
	db.movies.find({'year': {$lt: 2000}})

11. get all movies released before the year 2000 or after 2010
	db.movies.find({$or: [{year:{$lt: 2000}} , {year:{$gt:2010}}]})

12. add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit,Bilbo Baggins, sets out to the Lonely Mountain with a spirited group ofdwarves to reclaim their mountain home - and the gold within it - from the
dragon Smaug."
	db.movies.update({'title': "The Hobbit: An Unexpected Journey"} , {$set: {'synopsis': "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Moumtain with a spirited group of dwarves to reclaim their mountain home-and the gold within it-from the dragon Smaug"}})

13. add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves,along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaimErebor, their homeland, from Smaug. Bilbo Baggins is in possession of a
mysterious and magical ring."
	db.movies.update({'title': "The Hobbit: The Desolation of Smaug"},{$set: {'synopsis': "The dwares, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})

14. add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"
	db.movies.update({'title': "Pulp Fiction"} ,{$set: {'actor': "Samuel L. Jackson"}})

15.find all movies that have a synopsis that contains the word "Bilbo"
	 db.movies.createIndex({"title": "text" , "writer": "text" , "franchise": "text" , "actors": "text" , "synopsis": "text"})
	 db.movies.find({ $text: {$search: "Bilbo"} })

16. find all movies that have a synopsis that contains the word "Gandalf"
	db.movies.find({ $text: {$search: "Gandalf"} })

17. find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"

18.find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
	db.movies.find({$text: {$search:"\"dwarves\" \"hobbit\""}}).pretty()

19.find all movies that have a synopsis that contains the word "gold" and "dragon"
	db.movies.find({$text: {$search:"\"gold\" \"dragon\""}}).pretty()


20. delete the movie "Pee Wee Herman's Big Adventure"
	db.movies.remove({'title': "Pee Wee Herman's Big Adventure"})

21. delete the movie "Avatar"
	db.movies.remove({'title': "Avatar"})


						Second Part

1. db.createCollection("users")
db.users.insertMany([{username: "GoodGuyGreg" , first_name: "Good Guy", last_name: "Greg"} , {username: "ScumbagSteve" , full_name: {first: "Scumbag" , last: "Steve"} }])

2. db.createCollection("posts")
db.posts.insertMany([{username: "GoodGuyGreg" , title: "Passes out at party" , body: "Wakes up early and cleans house"} , {username: "GoodGuyGreg" , title: "Steals your identity" , body: "Raises your credit score"} , {username: "GoodGuyGreg" , title: "Reports a bug in your code" , body: "Sends you a Pull Request"} , {username: "ScumbagSteve" , title: "Borrows something" , body: "Sells it"} , {username: "ScumbagSteve" , title: "Borrows something" , body: "The end"} , {username: "ScumbagSteve" , title: "Forks your repo on github" , body: "Sets to private"}])

3. db.createCollection("comments")
db.comments.insertMany([{username: "GoodGuyGreg" , comment: "Hope u got a good deal!" , post: "Borrows something"} ,{username: "GoodGuyGreg" , comment: "What's mine is yours!" , post: "Borrows everything"} , {username: "GoodGuyGreg" , comment: "Don't violate the licensing agreement!" , post: "Forks your repo on github"} , {username: "ScumbagSteve" , comment: "It still isn't clean" , post: "Passes out at party"} , {username: "ScumbagSteve" , comment: "Denied your PR cause I found a hack" , post: "Reports a bug in your code"}])

4. find all users
	db.users.find()

5. find all posts
	db.posts.find()

6. find all posts that was authored by "GoodGuyGreg"
	db.posts.find({'username': "GoodGuyGreg"})

7. find all posts that was authored by "ScumbagSteve"
	db.posts.find({'username': "ScumbagSteve"})

8. find all comments
	db.comments.find()

9. find all comments that was authored by "GoodGuyGreg"
	db.comments.find({'username': "GoodGuyGreg"})

10.  find all comments that was authored by "ScumbagSteve"
	db.comments.find({'username': "ScumbagSteve"})

11. find all comments belonging to the post "Reports a bug in your code"
	db.comments.find({'post': "Report a bug in your code"})


